--- ping_common.c.org	2018-11-23 10:10:01.270389993 +0100
+++ ping_common.c	2018-12-08 14:38:12.588752159 +0100
@@ -68,7 +68,7 @@
 	int ii, jj, kk;
 	int pat[16];
 	char *cp;
-	char *bp = outpack+8;
+	unsigned char *bp = outpack+8;
 
 	for (cp = patp; *cp; cp++) {
 		if (!isxdigit(*cp)) {
@@ -106,7 +106,8 @@
 		options |= F_ADAPTIVE;
 		break;
 	case 'c':
-		npackets = atoi(optarg);
+		npackets = strtol(optarg, NULL, 10);
+		if(errno != 0) exit(2);
 		if (npackets <= 0) {
 			fprintf(stderr, "ping: bad number of packets to transmit.\n");
 			exit(2);
@@ -135,7 +136,7 @@
 			exit(2);
 		}
 
-		if (interval < 0) {
+		if (interval <= 0) {
 			fprintf(stderr, "ping: bad timing interval.\n");
 			exit(2);
 		}
@@ -143,14 +144,16 @@
 		break;
 	}
 	case 'w':
-		deadline = atoi(optarg);
+		deadline = strtol(optarg, NULL, 10);
+		if(errno != 0) exit(2);
 		if (deadline < 0) {
 			fprintf(stderr, "ping: bad wait time.\n");
 			exit(2);
 		}
 		break;
 	case 'l':
-		preload = atoi(optarg);
+		preload = strtol(optarg, NULL, 10);
+		if(errno != 0) exit(2);
 		if (preload <= 0) {
 			fprintf(stderr, "ping: bad preload value, should be 1..%d\n", mx_dup_ck);
 			exit(2);
@@ -163,7 +166,8 @@
 		}
 		break;
 	case 'S':
-		sndbuf = atoi(optarg);
+		sndbuf = strtol(optarg, NULL, 10);
+		if(errno != 0) exit(2);
 		break;
 	case 'n':
 		options |= F_NUMERIC;
@@ -179,7 +183,8 @@
 		options |= F_SO_DONTROUTE;
 		break;
 	case 's':		/* size of packet to send */
-		datalen = atoi(optarg);
+		datalen = strtol(optarg, NULL, 10);
+		if(errno != 0) exit(2);
 		if (datalen < 0) {
 			fprintf(stderr, "ping: illegal negative packet size %d.\n", datalen);
 			exit(2);
@@ -193,7 +198,8 @@
 		break;
 	case 't':
 		options |= F_TTL;
-		ttl = atoi(optarg);
+		ttl = strtol(optarg, NULL, 10);
+		if(errno != 0) exit(2);
 		if (ttl < 0 || ttl > 255) {
 			fprintf(stderr, "ping: ttl %u out of range\n", ttl);
 			exit(2);
@@ -206,7 +212,8 @@
 		options |= F_STRICTSOURCE;
 		break;
 	case 'W':
-		lingertime = atoi(optarg);
+		lingertime = strtol(optarg, NULL, 10);
+		if(errno != 0) exit(2);
 		if (lingertime < 0 || lingertime > INT_MAX/1000000) {
 			fprintf(stderr, "ping: bad linger time.\n");
 			exit(2);
@@ -243,12 +250,12 @@
 
 	if (nreceived) {
 		waittime = 2 * tmax;
-		if (waittime < 1000*interval)
+		if (waittime < 1000*(size_t)interval)
 			waittime = 1000*interval;
 	} else
 		waittime = lingertime*1000;
 
-	if (next < 0 || next < waittime/1000)
+	if (next < 0 || (size_t)next < waittime/1000)
 		next = waittime/1000;
 
 	it.it_interval.tv_sec = 0;
@@ -261,7 +268,7 @@
 
 static inline void update_interval(void)
 {
-	int est = rtt ? rtt/8 : interval*1000; 
+	int est = rtt ? rtt/8 : interval*1000;
 
 	interval = (est+rtt_addend+500)/1000;
 	if (uid && interval < MINUSERINTERVAL)
@@ -282,7 +289,7 @@
 	static int tokens;
 	int i;
 
-	/* Have we already sent enough? If we have, return an arbitrary positive value. */ 
+	/* Have we already sent enough? If we have, return an arbitrary positive value. */
 	if (exiting || (npackets && ntransmitted >= npackets && !deadline))
 		return 1000;
 
@@ -390,7 +397,7 @@
 void sock_setbufs(int icmp_sock, int alloc)
 {
 	int rcvbuf, hold;
-	int tmplen = sizeof(hold);
+	size_t tmplen = sizeof(hold);
 
 	if (!sndbuf)
 		sndbuf = alloc;
@@ -463,7 +470,7 @@
 
 	if (!(options & F_PINGFILLED)) {
 		int i;
-		char *p = outpack+8;
+		unsigned char *p = outpack+8;
 
 		/* Do not forget about case of small datalen,
 		 * fill timestamp area too!
@@ -535,7 +542,7 @@
 		 * If next<=0 send now or as soon as possible. */
 
 		/* Technical part. Looks wicked. Could be dropped,
-		 * if everyone used the newest kernel. :-) 
+		 * if everyone used the newest kernel. :-)
 		 * Its purpose is:
 		 * 1. Provide intervals less than resolution of scheduler.
 		 *    Solution: spinning.
@@ -546,7 +553,7 @@
 			int recv_expected = in_flight();
 
 			/* If we are here, recvmsg() is unable to wait for
-			 * required timeout. */ 
+			 * required timeout. */
 			if (1000*next <= 1000000/(int)HZ) {
 				/* Very short timeout... So, if we wait for
 				 * something, we sleep for MININTERVAL.
@@ -626,7 +633,7 @@
 				not_ours = parse_reply(&msg, cc, addrbuf, recv_timep);
 			}
 
-			/* See? ... someone runs another ping on this host. */ 
+			/* See? ... someone runs another ping on this host. */
 			if (not_ours)
 				install_filter();
 
@@ -643,7 +650,13 @@
 	finish();
 }
 
-void safe_strcpy(char *s, char* d) { while ((*d++ = *s++) != 0); }
+void safe_strcpy(char *s, char* d, size_t N) {
+	size_t i;
+	for(i = 0; i < N-1 && *s != '\0'; i++){
+		*d++ = *s++;
+	}
+	*d = '\0';
+ }
 
 int gather_statistics(uint8_t *ptr, int cc, uint16_t seq, int hops,
 		      int csfailed, struct timeval *tv, char *from)
@@ -655,7 +668,7 @@
 	if (!csfailed)
 		acknowledge(seq);
 
-	if (timing && cc >= 8+sizeof(struct timeval)) {
+	if (timing && (size_t)cc >= 8+sizeof(struct timeval)) {
 		struct timeval tmp_tv;
 		memcpy(&tmp_tv, ptr, sizeof(tmp_tv));
 
@@ -712,7 +725,7 @@
 		int i;
 		uint8_t *cp, *dp;
 		printf("%d bytes from ", cc);
-		printf(from);
+		printf("%s", from);
 		printf(": icmp_seq=%u", seq);
 
 		if (hops >= 0)
@@ -788,7 +801,7 @@
 	putchar('\n');
 	fflush(stdout);
 	printf("--- ");
-	printf(hostname);
+	printf("%s", hostname);
 	printf(" statistics ---\n");
 	printf("%ld packets transmitted, ", ntransmitted);
 	printf("%ld received", nreceived);
@@ -822,7 +835,7 @@
 	}
 	if (pipesize > 1)
 		printf(", pipe %d", pipesize);
-	if (ntransmitted > 1 && nreceived && 
+	if (ntransmitted > 1 && nreceived &&
 			(!interval || (options&(F_FLOOD|F_ADAPTIVE)))) {
 		int ipg = (1000000*(long long)tv.tv_sec+tv.tv_usec)/(ntransmitted-1);
 		printf(", ipg/ewma %d.%03d/%d.%03d ms",
